{"version":3,"file":"nmplot.js","mappings":";;;;;;;;;AAAA,UAAU,eAAe;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;;;;AC3H3B,QAAQ,SAAS,EAAE,mBAAO,CAAC,iCAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,8BAA8B;;;;;;;;;;;AC/C9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,qBAAqB;;;;;;;;;;;ACzCrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;UCnC1B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA;AACA,UAAU,SAAS,EAAE,mBAAO,CAAC,oCAAa;AAC1C,UAAU,kBAAkB,EAAE,mBAAO,CAAC,0CAAgB;AACtD,UAAU,cAAc,EAAE,mBAAO,CAAC,kCAAY;AAC9C,UAAU,eAAe,EAAE,mBAAO,CAAC,oCAAa;AAChD;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://nmplot/./src/canvas.js","webpack://nmplot/./src/container.js","webpack://nmplot/./src/nmplot.js","webpack://nmplot/./src/shape.js","webpack://nmplot/webpack/bootstrap","webpack://nmplot/./src/main.js"],"sourcesContent":["//const { DragAndScale } = require(\"./dragAndScale\");\r\n\r\nvar NmplotCanvas = function (canvasId, container) {\r\n    this.name = \"NmplotCanvas\";\r\n    this.description = \"Object to render Nmplot container on canvas\";\r\n    this.backgroundColor = Nmplot.DEFAULT_BACKGROUND_COLOR;\r\n\r\n    this.isGridActive = Nmplot.DEFAULT_GRID_STATUS;\r\n    this.axisColor = {\r\n        x: Nmplot.DEFAULT_AXIS_COLOR.X,\r\n        y: Nmplot.DEFAULT_AXIS_COLOR.Y,\r\n    };\r\n\r\n    this.canvas = document.getElementById(canvasId);\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n    // this.createMouseEventsHandler();\r\n    // this.ds = new DragAndScale(this);\r\n    this.containers = [container];\r\n    container.canvas = this;\r\n    this.setCanvasDims(\r\n        Nmplot.DEFAULT_CANVAS_DIMS.WIDTH,\r\n        Nmplot.DEFAULT_CANVAS_DIMS.HEIGHT\r\n    );\r\n    this.resetPosition(false);\r\n    this.render();\r\n};\r\nNmplotCanvas.prototype.renderBackground = function () {\r\n    this.ctx.fillStyle = this.backgroundColor;\r\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n};\r\nNmplotCanvas.prototype.renderGrid = function () {\r\n    this.ctx.lineWidth = 1;\r\n    this.ctx.beginPath();\r\n    this.ctx.strokeStyle = this.axisColor.x;\r\n    this.ctx.moveTo(0, this.posY);\r\n    this.ctx.lineTo(this.canvas.width, this.posY);\r\n    this.ctx.stroke();\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.strokeStyle = this.axisColor.y;\r\n    this.ctx.moveTo(this.posX, 0);\r\n    this.ctx.lineTo(this.posX, this.canvas.height);\r\n    this.ctx.stroke();\r\n};\r\nNmplotCanvas.prototype.render = function () {\r\n    this.renderBackground();\r\n    this.renderGrid();\r\n    var containers = this.containers;\r\n    for (var k = 0; k < containers.length; k++) {\r\n        var container = containers[k];\r\n        this.renderContainer(container);\r\n        var shapes = container.shapes;\r\n        for (var i = 0; i < shapes.length; i++) {\r\n            var shape = shapes[i];\r\n            this.renderShape(shape);\r\n        }\r\n    }\r\n};\r\nNmplotCanvas.prototype.renderContainer = function (container) {\r\n    this.ctx.lineWidth = 5;\r\n    if (container.selected) {\r\n        this.ctx.shadowColor = \"#d53\";\r\n        this.ctx.shadowBlur = 20;\r\n    } else {\r\n        this.ctx.shadowBlur = 1;\r\n    }\r\n    this.ctx.strokeRect(\r\n        this.posX + container.posX - container.width / 2,\r\n        this.posY + container.posY - container.height / 2,\r\n        container.width,\r\n        container.height\r\n    );\r\n};\r\nNmplotCanvas.prototype.renderShape = function (shape) {\r\n    this.ctx.fillStyle = shape.defaultColor;\r\n    var points = shape.points;\r\n    this.ctx.beginPath();\r\n    for (var j = 0; j < points.length; j++) {\r\n        var point = [\r\n            this.posX +\r\n                container.posX +\r\n                shape.pos.x +\r\n                points[j].x -\r\n                shape.origin.x,\r\n            this.posY +\r\n                container.posY +\r\n                shape.pos.y +\r\n                points[j].y -\r\n                shape.origin.y,\r\n        ];\r\n        point = shape.container.getBoundedPoint(point[0], point[1]);\r\n        if (j === 0) {\r\n            this.ctx.moveTo(point[0], point[1]);\r\n        } else {\r\n            this.ctx.lineTo(point[0], point[1]);\r\n        }\r\n    }\r\n    this.ctx.fill();\r\n};\r\nNmplotCanvas.prototype.resetPosition = function (reRender) {\r\n    this.posX = Math.floor(this.canvas.width / 2);\r\n    this.posY = Math.floor(this.canvas.height / 2);\r\n    if (reRender || reRender == null) {\r\n        this.render();\r\n    }\r\n};\r\nNmplotCanvas.prototype.setCanvasDims = function (x, y) {\r\n    this.canvas.width = x;\r\n    this.canvas.height = y;\r\n};\r\nNmplotCanvas.prototype.updateBackgroundColor = function (color, reRender) {\r\n    this.backgroundColor = color;\r\n    if (reRender || reRender == null) {\r\n        this.render();\r\n    }\r\n};\r\nNmplotCanvas.prototype.moveTo = function (x, y, reRender) {\r\n    this.posX = x;\r\n    this.posY = y;\r\n    if (reRender || reRender == null) {\r\n        this.render();\r\n    }\r\n};\r\nmodule.exports.NmplotCanvas = NmplotCanvas;\r\n","const { Nmplot } = require(\"./nmplot\");\r\n\r\nvar NmplotContainer = function () {\r\n    this.name = \"NmplotContainer\";\r\n    this.description = \"Container for all the shapes\";\r\n    this.shapes = [];\r\n    this.width = Nmplot.DEFAULT_CONTAINER_DIMS.X;\r\n    this.height = Nmplot.DEFAULT_CONTAINER_DIMS.Y;\r\n    this.posX = Nmplot.DEFAULT_CONTAINER_POS.X;\r\n    this.posY = Nmplot.DEFAULT_CONTAINER_POS.Y;\r\n    this.selected = false;\r\n};\r\nNmplotContainer.prototype.add = function (shape) {\r\n    shape.container = this;\r\n    this.shapes.push(shape);\r\n};\r\nNmplotContainer.prototype.isPointInside = function (x, y, margin) {\r\n    // console.log(x, y);\r\n    var isInsideX =\r\n        x > this.posX - this.width / 2 && x < this.posX + this.width / 2;\r\n    // console.log(isInsideX);\r\n    var isInsideY =\r\n        y > this.posY - this.height / 2 && y < this.posY + this.height / 2;\r\n    // console.log(isInsideX && isInsideY);\r\n    return isInsideX && isInsideY;\r\n};\r\n\r\nNmplotContainer.prototype.moveTo = function (x, y, reRender) {\r\n    this.posX = x;\r\n    this.posY = y;\r\n    if (reRender || reRender == null) {\r\n        this.canvas.render();\r\n    }\r\n};\r\nNmplotContainer.prototype.getBoundedPoint = function (x, y) {\r\n    if (x > this.canvas.posX + this.posX + this.width / 2) {\r\n        x = this.canvas.posX + this.posX + this.width / 2;\r\n    } else if (x < this.canvas.posX + this.posX - this.width / 2) {\r\n        x = this.canvas.posX + this.posX - this.width / 2;\r\n    }\r\n    if (y > this.canvas.posY + this.posY + this.height / 2) {\r\n        y = this.canvas.posY + this.posY + this.height / 2;\r\n    } else if (y < this.canvas.posY + this.posY - this.height / 2) {\r\n        y = this.canvas.posY + this.posY - this.height / 2;\r\n    }\r\n    return [x, y];\r\n};\r\nmodule.exports.NmplotContainer = NmplotContainer;\r\n","var Nmplot = {\r\n    VERSION: 1.0,\r\n\r\n    //SHAPE\r\n    DEFAULT_SHAPE_SCALE: {\r\n        X: 10,\r\n        Y: 10,\r\n    },\r\n\r\n    //Container\r\n    DEFAULT_CONTAINER_DIMS: {\r\n        X: 200,\r\n        Y: 300,\r\n    },\r\n    DEFAULT_CONTAINER_POS: {\r\n        X: 0,\r\n        Y: 0,\r\n    },\r\n\r\n    //CANVAS\r\n    DEFAULT_CANVAS_DIMS: {\r\n        WIDTH: 1000,\r\n        HEIGHT: 500,\r\n    },\r\n    DEFAULT_AXIS_COLOR: {\r\n        X: \"red\",\r\n        Y: \"blue\",\r\n    },\r\n    DEFAULT_UNIT_SIZE: {\r\n        X: 10,\r\n        Y: 10,\r\n    },\r\n    DEFAULT_BACKGROUND_COLOR: \"#DCDCDC\",\r\n    DEFAULT_GRID_STATUS: true,\r\n    createCoord: function (x, y) {\r\n        return {\r\n            x,\r\n            y,\r\n        };\r\n    },\r\n};\r\nmodule.exports.Nmplot = Nmplot;\r\n","var NmplotShape = function (shape, dim) {\r\n    this.points = [];\r\n    this.pos = {\r\n        x: 0,\r\n        y: 0,\r\n    };\r\n    this.scaleX = Nmplot.DEFAULT_SHAPE_SCALE.X;\r\n    this.scaleY = Nmplot.DEFAULT_SHAPE_SCALE.X;\r\n    this.defaultColor = \"black\";\r\n\r\n    switch (shape) {\r\n        case \"rectangle\":\r\n            this.shape = \"rectangle\";\r\n            this.points = [\r\n                Nmplot.createCoord(0, 0),\r\n                Nmplot.createCoord(dim.l1, 0),\r\n                Nmplot.createCoord(dim.l1, dim.l2),\r\n                Nmplot.createCoord(0, dim.l2),\r\n            ];\r\n            this.origin = Nmplot.createCoord(dim.l1 / 2, dim.l2 / 2);\r\n            break;\r\n        default:\r\n            this.shape = shape;\r\n    }\r\n};\r\nNmplotShape.prototype.addPoint = function (x, y) {\r\n    this.points.push(Nmplot.createCoord(x, y));\r\n};\r\nNmplotShape.prototype.moveTo = function (x, y, reRender) {\r\n    this.pos.x = x;\r\n    this.pos.y = y;\r\n    if (reRender || reRender == null) {\r\n        this.container.canvas.render();\r\n    }\r\n};\r\nmodule.exports.NmplotShape = NmplotShape;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","(function (global) {\r\n    var { Nmplot } = require(\"./nmplot.js\");\r\n    var { NmplotContainer } = require(\"./container.js\");\r\n    var { NmplotShape } = require(\"./shape.js\");\r\n    var { NmplotCanvas } = require(\"./canvas.js\");\r\n\r\n    global.Nmplot = Nmplot;\r\n    global.NmplotContainer = NmplotContainer;\r\n    global.NmplotShape = NmplotShape;\r\n    global.NmplotCanvas = NmplotCanvas;\r\n})(window);\r\n"],"names":[],"sourceRoot":""}